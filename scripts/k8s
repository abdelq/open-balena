#!/bin/bash -e

source "${BASH_SOURCE%/*}/_realpath"

CMD="$(realpath "$0")"
DIR="$(dirname "${CMD}")"
BASE_DIR="$(dirname "${DIR}")"
CONFIG_DIR="${BASE_DIR}/config"

echo_bold() {
  printf "\\033[1m%s\\033[0m\\n" "$@"
}

VERSIONS_FILE="${BASE_DIR}/compose/versions"
if [ ! -f "$VERSIONS_FILE" ]; then
  echo_bold "No service versions defined in ${VERSIONS_FILE}"
  exit 1
fi

source "${VERSIONS_FILE}"

ENV_FILE="${CONFIG_DIR}/activate"
if [ ! -f "$ENV_FILE" ]; then
  echo_bold 'No configuration found; please create one first with: ./scripts/quickstart'
  echo_bold 'See README.md for help.'
  exit 1
fi

source "${ENV_FILE}"

# TODO Include the MDNS publisher if the domain is valid

# shellcheck source=/dev/null

if [ "$1" = "install" ]; then
  kubectl create namespace "${OPENBALENA_K8S_NAMESPACE}"
  helm dependency update "${BASE_DIR}/helm"
  envsubst < "${CONFIG_DIR}/kubernetes.yaml" | \
    helm install --values - \
      --namespace "${OPENBALENA_K8S_NAMESPACE}" \
      "${OPENBALENA_K8S_NAME}" \
      "${BASE_DIR}/helm"
fi

if [ "$1" = "upgrade" ]; then
  helm dependency update "${BASE_DIR}/helm"
  envsubst < "${CONFIG_DIR}/kubernetes.yaml" | \
    helm upgrade --values - \
      --namespace "${OPENBALENA_K8S_NAMESPACE}" \
      "${OPENBALENA_K8S_NAME}" \
      "${BASE_DIR}/helm"
fi

if [ "$1" = "uninstall" ]; then
  helm uninstall \
    --namespace "${OPENBALENA_K8S_NAMESPACE}" \
    "${OPENBALENA_K8S_NAME}"
fi

# TODO Write help/usage for this script
