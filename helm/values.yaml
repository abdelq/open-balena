issuer:
  enabled: ${OPENBALENA_ACME_CERT_ENABLED}
  name: letsencrypt-prod
  server: https://acme-v02.api.letsencrypt.org/directory
  email: ${OPENBALENA_SUPERUSER_EMAIL}
  solvers:
    - http01:
        ingress:
          class: haproxy

# TODO service name...
ingress:
  annotations:
    kubernetes.io/ingress.class: haproxy
    cert-manager.io/issuer: letsencrypt-prod
  tls:
    - hosts:
        - api.${OPENBALENA_HOST_NAME}
        - registry.${OPENBALENA_HOST_NAME}
        - vpn.${OPENBALENA_HOST_NAME}
        - s3.${OPENBALENA_HOST_NAME}
      secretName: openbalena-cert
  hosts:
    - host: api.${OPENBALENA_HOST_NAME}
      paths:
        - path: /
          pathType: Prefix
          backend:
            serviceName: openbalena-api
            servicePort: 80
    - host: registry.${OPENBALENA_HOST_NAME}
      paths:
        - path: /
          pathType: Prefix
          backend:
            serviceName: openbalena-registry
            servicePort: 80
    - host: vpn.${OPENBALENA_HOST_NAME}
      paths:
        - path: /
          pathType: Prefix
          backend:
            serviceName: openbalena-vpn
            servicePort: 80
    - host: s3.${OPENBALENA_HOST_NAME}
      paths:
        - path: /
          pathType: Prefix
          backend:
            serviceName: openbalena-s3
            servicePort: 80

# TODO For names, probably should define new functions in helper like in Prometheus? for different services
# TODO You can see that's it's not the best right now when naming the release something different
# TODO Comments for all values
# TODO Consider moving to ConfigMaps and Secrets

api:
  name: openbalena-api
  image:
    repository: balena/open-balena-api
    tag: ${OPENBALENA_API_VERSION_TAG}
  service:
    ports:
      - port: 80
  env:
    - name: API_VPN_SERVICE_API_KEY
      value: "${OPENBALENA_API_VPN_SERVICE_API_KEY}"
    - name: BALENA_ROOT_CA
      value: "${OPENBALENA_ROOT_CA}"
    - name: COOKIE_SESSION_SECRET
      value: "${OPENBALENA_COOKIE_SESSION_SECRET}"
    - name: DB_HOST
      value: "openbalena-db"
    - name: DB_PASSWORD
      value: "docker"
    - name: DB_PORT
      value: "5432"
    - name: DB_USER
      value: "docker"
    - name: DELTA_HOST
      value: "delta.${OPENBALENA_HOST_NAME}"
    - name: DEVICE_CONFIG_OPENVPN_CA
      value: "${OPENBALENA_VPN_CA_CHAIN}"
    - name: DEVICE_CONFIG_SSH_AUTHORIZED_KEYS
      value: "${OPENBALENA_SSH_AUTHORIZED_KEYS}"
    - name: HOST
      value: "api.${OPENBALENA_HOST_NAME}"
    - name: IMAGE_MAKER_URL
      value: "img.${OPENBALENA_HOST_NAME}"
    - name: IMAGE_STORAGE_BUCKET
      value: "resin-production-img-cloudformation"
    - name: IMAGE_STORAGE_PREFIX
      value: "images"
    - name: IMAGE_STORAGE_ENDPOINT
      value: "s3.amazonaws.com"
    - name: JSON_WEB_TOKEN_EXPIRY_MINUTES
      value: "10080"
    - name: JSON_WEB_TOKEN_SECRET
      value: "${OPENBALENA_JWT_SECRET}"
    - name: MIXPANEL_TOKEN
      value: "__unused__"
    - name: PRODUCTION_MODE
      value: "${OPENBALENA_PRODUCTION_MODE}"
    - name: PUBNUB_PUBLISH_KEY
      value: "__unused__"
    - name: PUBNUB_SUBSCRIBE_KEY
      value: "__unused__"
    - name: REDIS_HOST
      value: "openbalena-redis"
    - name: REDIS_PORT
      value: "6379"
    - name: REGISTRY2_HOST
      value: "registry.${OPENBALENA_HOST_NAME}"
    - name: REGISTRY_HOST
      value: "registry.${OPENBALENA_HOST_NAME}"
    - name: SENTRY_DSN
      value: ""
    - name: TOKEN_AUTH_BUILDER_TOKEN
      value: "${OPENBALENA_TOKEN_AUTH_BUILDER_TOKEN}"
    - name: TOKEN_AUTH_CERT_ISSUER
      value: "api.${OPENBALENA_HOST_NAME}"
    - name: TOKEN_AUTH_CERT_KEY
      value: "${OPENBALENA_TOKEN_AUTH_KEY}"
    - name: TOKEN_AUTH_CERT_KID
      value: "${OPENBALENA_TOKEN_AUTH_KID}"
    - name: TOKEN_AUTH_CERT_PUB
      value: "${OPENBALENA_TOKEN_AUTH_PUB}"
    - name: TOKEN_AUTH_JWT_ALGO
      value: "ES256"
    - name: VPN_HOST
      value: "vpn.${OPENBALENA_HOST_NAME}"
    - name: VPN_PORT
      value: "443"
    - name: VPN_SERVICE_API_KEY
      value: "${OPENBALENA_VPN_SERVICE_API_KEY}"
    - name: SUPERUSER_EMAIL
      value: "${OPENBALENA_SUPERUSER_EMAIL}"
    - name: SUPERUSER_PASSWORD
      value: "${OPENBALENA_SUPERUSER_PASSWORD}"

registry:
  name: openbalena-registry
  image:
    repository: balena/open-balena-registry
    tag: ${OPENBALENA_REGISTRY_VERSION_TAG}
  service:
    ports:
      - port: 80
  storage: "10Gi"
  env:
    - name: API_TOKENAUTH_CRT
      value: "${OPENBALENA_TOKEN_AUTH_PUB}"
    - name: BALENA_REGISTRY2_HOST
      value: "registry.${OPENBALENA_HOST_NAME}"
    - name: BALENA_ROOT_CA
      value: "${OPENBALENA_ROOT_CA}"
    - name: BALENA_TOKEN_AUTH_ISSUER
      value: "api.${OPENBALENA_HOST_NAME}"
    - name: BALENA_TOKEN_AUTH_REALM
      value: "https://api.${OPENBALENA_HOST_NAME}/auth/v1/token"
    - name: COMMON_REGION
      value: "${OPENBALENA_S3_REGION}"
    - name: REGISTRY2_CACHE_ENABLED
      value: "false"
    - name: REGISTRY2_CACHE_ADDR
      value: "127.0.0.1:6379"
    - name: REGISTRY2_CACHE_DB
      value: "0"
    - name: REGISTRY2_CACHE_MAXMEMORY_MB
      value: "1024"
    - name: REGISTRY2_CACHE_MAXMEMORY_POLICY
      value: "allkeys-lru"
    - name: REGISTRY2_S3_REGION_ENDPOINT
      value: "${OPENBALENA_S3_ENDPOINT}"
    - name: REGISTRY2_S3_BUCKET
      value: "${OPENBALENA_REGISTRY2_S3_BUCKET}"
    - name: REGISTRY2_S3_KEY
      value: "${OPENBALENA_S3_ACCESS_KEY}"
    - name: REGISTRY2_S3_SECRET
      value: "${OPENBALENA_S3_SECRET_KEY}"
    - name: REGISTRY2_SECRETKEY
      value: "${OPENBALENA_REGISTRY_SECRET_KEY}"

vpn:
  name: openbalena-vpn
  image:
    repository: balena/open-balena-vpn
    tag: ${OPENBALENA_VPN_VERSION_TAG}
  service:
    ports:
      - name: http
        port: 80
      - name: devices
        port: 443
      - name: tunnel
        port: 3128
  env:
    - name: API_SERVICE_API_KEY
      value: "${OPENBALENA_API_VPN_SERVICE_API_KEY}"
    - name: BALENA_API_HOST
      value: "api.${OPENBALENA_HOST_NAME}"
    - name: BALENA_ROOT_CA
      value: "${OPENBALENA_ROOT_CA}"
    - name: BALENA_VPN_PORT
      value: "443"
    - name: PRODUCTION_MODE
      value: "${OPENBALENA_PRODUCTION_MODE}"
    - name: RESIN_VPN_GATEWAY
      value: "10.2.0.1"
    - name: SENTRY_DSN
      value: ""
    - name: VPN_HAPROXY_USEPROXYPROTOCOL
      value: "true"
    - name: VPN_OPENVPN_CA_CRT
      value: "${OPENBALENA_VPN_CA}"
    - name: VPN_OPENVPN_SERVER_CRT
      value: "${OPENBALENA_VPN_SERVER_CRT}"
    - name: VPN_OPENVPN_SERVER_DH
      value: "${OPENBALENA_VPN_SERVER_DH}"
    - name: VPN_OPENVPN_SERVER_KEY
      value: "${OPENBALENA_VPN_SERVER_KEY}"
    - name: VPN_SERVICE_API_KEY
      value: "${OPENBALENA_VPN_SERVICE_API_KEY}"

db:
  name: openbalena-db
  image:
    repository: balena/open-balena-db
    tag: ${OPENBALENA_DB_VERSION_TAG}
  service:
    ports:
      - port: 5432
  storage: "10Gi"

s3:
  name: openbalena-s3
  image:
    repository: balena/open-balena-s3
    tag: ${OPENBALENA_S3_VERSION_TAG}
  service:
    ports:
      - port: 80
  storage: "50Gi"
  env:
    - name: S3_MINIO_ACCESS_KEY
      value: "${OPENBALENA_S3_ACCESS_KEY}"
    - name: S3_MINIO_SECRET_KEY
      value: "${OPENBALENA_S3_SECRET_KEY}"
    - name: BUCKETS
      value: "${OPENBALENA_S3_BUCKETS}"

redis:
  name: openbalena-redis
  image:
    repository: redis
    tag: alpine
  service:
    ports:
      - port: 6379
  storage: "10Gi"

kubernetes-ingress:
  controller:
    service:
      tcpPorts:
        - name: vpn
          port: 3128
          targetPort: 3128
    extraArgs:
      - --configmap-tcp-services=openbalena/tcp-configmap  # XXX
